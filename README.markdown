Author: Laurent Charignon
Date  : November 2011


CONTENT
=======

This python script is a tool that can make things easy while using [ORMLite][1].
It generate Java Models and Config Files from a .yml (YAML) file.
It looks like the [Doctrine yml files][2] to generate models on [Symfony][3] based projects.


INSTALL
=======
You need to install python 2.7 and pyyaml extension for python before using this script.
On Ubuntu 11.10:

    sudo easy_install pyyaml

For the moment the script reads the content of a .yml file and generate the java classes (not yet the configuration files) on a separate directory.
Those detailed could be changed in the first line of the python script (for the moment main.py).
A sample of .yml file is attached in the folder as well as some sample outputs
To launch the script just type:

    python ./main.py


EXAMPLE
=======

From this Yaml file, the program will generate two java models *SimpleData* and *Counter* and will create all the necessary anotations, getters, setters and so forth...
So let's examine an example of YAML file:
    
    #config.yml
    
    Config:
      package-name: com.example.helloandroid
    
    Models:
      #A model
      SimpleData:
        id:
          type: int
          generated: true
        string:
          type: String
          generated: true
          columnName: "BOB"
        millis:
          type: long
        date:
          type: Date
        even:
          type: boolean

      Counter:
        id:
          type: int
          generated: true
        value:
          type: int
        date:
          type: Date


This file contains two models and an information about the package name.
After launching the script with the command:

    python ./main.py

We obtain two .java files in the example directory (default directory for java models generated).
This is what *SimpleData.java* looks like:


    /*-----------------------------------------------------------------
      Autogenerated by PyORMLiteYMLSupport
    ----------------------------------------------------------------------------*/
    package com.example.helloandroid;

    @DatabaseTable
    public class SimpleData { 

      @DatabaseField
      private Date date;

      @DatabaseField(generated = true)
      private int id;

      @DatabaseField
      private int value;

      @DatabaseField
      private Date date;

      @DatabaseField
      private boolean even;

      @DatabaseField
      private long millis;

      @DatabaseField(generated = true)
      private int id;

      @DatabaseField(generated = true, columnName = "BOB")
      private String string;

      //Empty constructor for OrmLite
      public SimpleData() {}

      public Date getDate() {
           return date;
      }

      public void setDate( Date date ) {
           this.date=date;
      }

      public int getId() {
           return id;
      }

      public void setId( int id ) {
           this.id=id;
      }

      public int getValue() {
           return value;
      }

      public void setValue( int value ) {
           this.value=value;
      }

      public Date getDate() {
           return date;
      }

      public void setDate( Date date ) {
           this.date=date;
      }

      public boolean getEven() {
           return even;
      }

      public void setEven( boolean even ) {
           this.even=even;
      }

      public long getMillis() {
           return millis;
      }

      public void setMillis( long millis ) {
           this.millis=millis;
      }

      public int getId() {
           return id;
      }

      public void setId( int id ) {
           this.id=id;
      }

      public String getString() {
           return string;
      }

      public void setString( String string ) {
           this.string=string;
      }

    }

For the moment, it just does this. 
In the near future, the goal is to be able to general the *omllite_config.txt* file and the database helper file so that one can do it's own ORMLite based project by tweaking only this config file.
Of course the java files are not yet completed and the import still have to be handled by Eclipse (or any other software or the developper itself).

The generated file can be customized with a few options that are located on the top of the python script:

    #Input configuration
    FILENAME    = "config.yml"
    #Output configuration
    SRC_DIR     = "examples"
    #output the getters and the setters
    GETTERS     = True
    SETTERS     = True

They are qui straightforward and you can change them to obtain the desired result.

[1]: http://ormlite.com/        "ORMLite"
[2]: http://www.doctrine-project.org/documentation/manual/1_2/pl/yaml-schema-files  "Doctrine YAML Schema"
[3]: http://www.symfony-project.org/   "Symfony"
